________________________________
HashSet

          HashSet:
->It will contains only unique element.
-> Does not maintain insertion order.
-> Not Synchronized and not thread safe
->This class permitted(store) null elements.
->It is used Hashing to inject data into data base.
->Does not have key value pair.(only key).
->not allow Duplicate value.
->a.add(obj);
->1 object required.
->extends HashSet class.
->implement set, cloneable and serializable interface.
->Hash Set internally created HashMap.


_________________________
HashSet vs LinkedHashSet

HashSet
1. HashSet does not maintain insertion order.
2. HashSet internally map HashMap.

LinkedHashSet
1. LinkedHashSet maintain insertion order.
2. LinkedHashSet internally map LinkedHashMap.





Q. How to HashSet internally work?
Internally, it uses a HashMap to store its elements.
     1. The HashSet uses a HashMap internally where each element is stored as a key with a constant dummy value.
     2. The hash code of an element determines the index of the bucket where it will be stored.
     3. Collisions are handled by using linked lists or balanced trees within the buckets.
     4. Before adding a new element, HashSet checks for duplicates using the equals() method to ensure all elements are unique.









     For an interview, it’s important to present a clear and concise understanding of how `HashSet` works internally. Here’s a focused explanation with theory, a simplified diagram, and a code example:

     ### Interview Explanation

     **HashSet Internals:**

     1. **Hash Table Structure**:
        - **HashSet** uses a hash table to store elements.
        - Internally, it’s backed by a `HashMap`, where each element is stored as a key in the `HashMap`.

     2. **Hash Code**:
        - When you add an element to a `HashSet`, its `hashCode()` method is called to compute a hash value.
        - This hash value determines the bucket index where the element will be stored.

     3. **Buckets**:
        - The hash table consists of an array of buckets (or slots).
        - Each bucket can hold a linked list of elements (or a balanced tree in case of many collisions).

     4. **Collision Handling**:
        - If two elements hash to the same bucket, they are stored in a linked list within that bucket.
        - From Java 8 onwards, if a bucket contains many elements, the linked list may be converted to a balanced tree for better performance.

     5. **Equality Check**:
        - To ensure no duplicates, `HashSet` uses the `equals()` method to check if the new element is already present in the bucket.

     ### Diagram

     Here’s a simplified diagram illustrating how a `HashSet` is organized:

     ```
     HashSet
       |
       |-- Hash Table (Array of Buckets)
             |
             |-- Bucket 0
             |     |
             |     |-- [Element1, Element2] (Linked List or Tree)
             |
             |-- Bucket 1
             |     |
             |     |-- [Element3] (Single Element)
             |
             |-- Bucket 2
                   |
                   |-- [Element4, Element5] (Linked List or Tree)
     ```

     ### Code Example

     Here’s a Java example showing how `HashSet` handles elements:

     ```java
     import java.util.HashSet;
     import java.util.Objects;
     import java.util.Set;

     class Person {
         private int id;
         private String name;

         public Person(int id, String name) {
             this.id = id;
             this.name = name;
         }

         @Override
         public int hashCode() {
             return Objects.hash(id, name);
         }

         @Override
         public boolean equals(Object obj) {
             if (this == obj) return true;
             if (obj == null || getClass() != obj.getClass()) return false;
             Person person = (Person) obj;
             return id == person.id && Objects.equals(name, person.name);
         }

         @Override
         public String toString() {
             return "Person{" +
                     "id=" + id +
                     ", name='" + name + '\'' +
                     '}';
         }
     }

     public class HashSetDemo {
         public static void main(String[] args) {
             Set<Person> set = new HashSet<>();

             Person p1 = new Person(1, "Alice");
             Person p2 = new Person(2, "Bob");
             Person p3 = new Person(1, "Alice"); // Duplicate

             set.add(p1);
             set.add(p2);
             set.add(p3); // Will not be added

             System.out.println(set); // Output: [Person{id=1, name='Alice'}, Person{id=2, name='Bob'}]
         }
     }
     ```

     ### Explanation of Code

     1. **Creating Set**: A `HashSet` is initialized, which uses an internal hash table.
     2. **Adding Elements**:
        - `p1` and `p2` are added to the set. Their `hashCode()` values determine their bucket placement.
        - `p3` has the same `hashCode()` and `equals()` values as `p1`, so it’s not added.
     3. **Hash Code and Equality**: `hashCode()` determines the bucket index, and `equals()` checks for duplicates within the bucket.

     ### Key Points for Interview:

     - **HashSet** does not allow duplicate elements and uses hashing for storage.
     - **Collision Handling**: Uses linked lists or trees for collisions.
     - **Hash Code and Equality**: Relies on `hashCode()` and `equals()` to manage elements.

     Be prepared to discuss the trade-offs and performance characteristics of `HashSet`, including its average time complexities for operations and how it handles collisions.











